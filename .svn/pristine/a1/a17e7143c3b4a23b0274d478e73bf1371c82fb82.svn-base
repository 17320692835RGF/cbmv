/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-02-27 00:55:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.comm;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.awt.Graphics2D;
import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.Color;
import javax.imageio.ImageIO;
import java.awt.Image;
import java.io.OutputStream;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.Random;

public final class validCode_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

 
	    //声明要用到的数组
	    char[] chars = null; 
    
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write('\r');
      out.write('\n');
	

	//如果chars是null，则表示未初始化，则进行初始化
	if(chars == null){
		chars = new char[62];
		//存入大写字母
		for(int i = 0;i< 26;i++){
			chars[i] = (char)(65+i);
		}
		//存入小写字母
		for(int i = 26 ;i<36;i++){
			chars[i] = (char)(48 + i -26); 
		}
		 //填充小写字母
		for(int i = 36;i < 62;i++){
			chars[i] = (char)(97 + i -36);
		}
	}
	
	
	//创建图像
	BufferedImage bi = new BufferedImage(175,80,BufferedImage.TYPE_INT_RGB);
	//获取画板
	Graphics g =bi.getGraphics();
	/*------------------ 背景颜色需放在字体颜色前------------------ */
	//把背景改为白色
	Color c = new Color(255,255,255);
	g.setColor(c); //写入颜色
	g.fillRect(0, 0, bi.getWidth(), bi.getHeight());//设置背景大小
	
	//生成4个随机字符
	String str = "";
	Random r = new Random();
	for(int i = 0;i< 4;i++){
		//在循环中实现每个字符的不同效果
		String ch ="" + chars[r.nextInt(chars.length)];
		
		//将字符绘制到图像中
		Font f= new Font("宋体",Font.ITALIC|Font.BOLD,40);
		g.setFont(f);
		//每一个字符颜色不一样
		int cr = r.nextInt(200);
		int cg = r.nextInt(200);
		int cb = r.nextInt(200);
		g.setColor(new Color(cr,cg,cb));
		
		//计算每个字符的位置，上下留5个现需； 字符的位置是从左下角开始
		int y = r.nextInt(75 - 45 + 1) + 45;
		g.drawString(ch, 10 + 40 * i, y);
		//拼接验证码
		str += ch  ;
		//划线
		g.drawLine(r.nextInt(81), r.nextInt(81), r.nextInt(81), r.nextInt(81));
		((Graphics2D)g).setStroke(new BasicStroke(r.nextInt(5)+1));
	}
	
	//将生成的验证码保存到会话中
	session.setAttribute("captcha", str);
		
	//输出图像
	OutputStream os = response.getOutputStream();
	response.reset();//重置响应
	ImageIO.write(bi, "jpg", os);//输出
	os.flush();//释放资源
	os.close();//关闭

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
